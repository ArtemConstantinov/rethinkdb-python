from __future__ import annotations
from dataclasses import dataclass
import weakref

__all__ = (
    "Token",
    "TokenGenerator",
)


@dataclass(frozen=True)
class Token:
    value: int

    def __eq__(self, __o: object) -> bool:
        return self.value in {__o, getattr(__o, "value", "NaN")}

    def __add__(self, __o: int) -> Token:
        return Token(self.value + __o)

    def __radd__(self, __o: int) -> Token:
        return Token(self.value + __o)

    def __lt__(self, __o: Token) -> bool:
        return self.value < __o.value

    def __gt__(self, __o: Token) -> bool:
        return self.value > __o.value


MAX_TOKEN_VAL = Token(2**63)


class TokenGenerator:
    __slots__ = ("_next_token", "_in_use")

    _next_token: Token

    def __init__(self) -> None:
        """
        Initialize a new TokenGenerator instance.

        This creates a new TokenGenerator object with an initial token value of zero.
        """
        self._in_use = weakref.WeakSet()
        self.reset()

    def reset(self) -> None:
        """
        Reset the token generator to its initial state.

        This sets the next_token value to zero, effectively discarding any previous tokens
        generated by this instance.
        """
        self._next_token = Token(0)

    def __reach_max(self) -> bool:
        return self._next_token > MAX_TOKEN_VAL

    def new(self) -> Token:
        """
        Generate a new token value.

        This method generates a new token value by incrementing the next_token value and returning
        the previous value. Each time this method is called, the next generated token value will
        be higher than the previous one.

        Returns:
            An integer that represents the newly generated token value.
        """
        response = self._next_token
        while response in self._in_use:
            self._next_token += 1
            response = self._next_token
        else:
            self._next_token += 1

        # if self.__reach_max():
        #     self.reset()
        self._in_use.add(response)
        return response
